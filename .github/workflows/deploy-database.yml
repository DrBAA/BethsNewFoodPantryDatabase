# A WORKFLOW TO UPDATE MYSQL DATABASE ON A WINDOWS MACHINE
# Automatically applies all migration scripts in the directory, ensuring your database is always up to date with the latest changes.
# No need to manually update the workflow file with each new migration script.
# A WORKFLOW TO UPDATE MYSQL DATABASE ON A WINDOWS MACHINE
# Automatically applies all migration scripts in the directory, ensuring your database is always up to date with the latest changes.
# No need to manually update the workflow file with each new migration script.


name: CI/CD Pipeline for MySQL

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: windows-latest

    steps:
    - name: Checkout Code
      # This step checks out the code from the repository
      uses: actions/checkout@v2

    - name: Install MySQL Client
      # Install MySQL Client using Chocolatey package manager
      run: |
        echo "Step 2: Installing MySQL Client"
        choco install mysql -y
        echo "MySQL Client installed successfully"

    - name: Ensure Migrations Log Table Exists
      run: |
        echo "Step 3: Ensuring migrations_log table exists"
        mysql -h ${{ secrets.DB_HOST }} -P ${{ secrets.DB_PORT }} -u ${{ secrets.DB_USER }} -p${{ secrets.DB_PASSWORD }} -D ${{ secrets.DB_NAME }} -e "CREATE TABLE IF NOT EXISTS migrations_log (id SERIAL PRIMARY KEY, script_name VARCHAR(255) UNIQUE NOT NULL, applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)"
        echo "migrations_log table ensured"

    # Run all SQL scripts from a specific folder and log them in a migration table
    - name: Run SQL Scripts from Folder
      shell: bash
      run: |
        echo "Step 4: Running SQL scripts from folder"
        for file in "C:\\Users\\user\\Desktop\\BETHs FOOD PANTRY DATABASE\\Beths New Food Pantry Database\\Scripts\\Database Migrations"/*.sql; do
          if [ -f "$file" ]; then
            script_name=$(basename "$file")
            echo "Checking if $script_name has been applied"

            count=$(mysql -h ${{ secrets.DB_HOST }} -P ${{ secrets.DB_PORT }} -u ${{ secrets.DB_USER }} -p${{ secrets.DB_PASSWORD }} -D ${{ secrets.DB_NAME }} -se "SELECT COUNT(*) FROM migrations_log WHERE script_name='$script_name'")

            if [ $count -eq 0 ]; then
              echo "Running $script_name"
              mysql -h ${{ secrets.DB_HOST }} -P ${{ secrets.DB_PORT }} -u ${{ secrets.DB_USER }} -p${{ secrets.DB_PASSWORD }} -D ${{ secrets.DB_NAME }} -e "source \"$file\""

              echo "Logging $script_name to migration table"
              mysql -h ${{ secrets.DB_HOST }} -P ${{ secrets.DB_PORT }} -u ${{ secrets.DB_USER }} -p${{ secrets.DB_PASSWORD }} -D ${{ secrets.DB_NAME }} -e "INSERT INTO migrations_log (script_name, applied_at) VALUES ('$script_name', NOW())"
            else
              echo "$script_name has already been applied, skipping"
            fi
          else
            echo "No SQL files found in the specified directory."
          fi
        done
        echo "SQL scripts executed and logged successfully"



    - name: Run Database Migrations
      # Set environment variables with secrets for connecting to the Aiven MySQL database
      env:
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      # Run Flyway migration command to apply database changes
      run: |
        echo "Step 5: Running database migrations"
        flyway -url=jdbc:mysql://$DB_HOST:$DB_PORT/$DB_NAME -user=$DB_USER -password=$DB_PASSWORD migrate
        echo "Database migrations completed successfully"

    - name: Send Email Notification
      # Send email notification using PowerShell
      run: |
        echo "Step 6: Sending email notification"
        powershell -Command "$SMTPServer = 'smtp.your-email-provider.com'; $SMTPPort = '587'; $SMTPUser = 'your-email@example.com'; $SMTPPassword = 'your-email-password'; $From = 'your-email@example.com'; $To = 'recipient-email@example.com'; $Subject = 'CI/CD Pipeline Report'; $Body = 'Database update completed successfully'; $SMTPMessage = New-Object System.Net.Mail.MailMessage($From, $To, $Subject, $Body); $SMTPClient = New-Object System.Net.Mail.SmtpClient($SMTPServer, $SMTPPort); $SMTPClient.EnableSsl = $true; $SMTPClient.Credentials = New-Object System.Net.NetworkCredential($SMTPUser, $SMTPPassword); $SMTPClient.Send($SMTPMessage)"
        echo "Email notification sent successfully"

    - name: Notifications and Reporting
      # Generate reports
      run: |
        echo "Step 7: Generating reports"
        echo "Reports generated successfully"

